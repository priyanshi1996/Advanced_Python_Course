 Python gives your custom class full control over how it wants to 
 represent itself in string form, 
 and there are essentially four main functions used to do this. 
 
1. str(object) function, this function is called on your class when the 
str(object), print(object), or string.format(object) functions are used to 
convert the object to a string and, obviously, the return value has to 
be a string. This particular string is typically an informal representation 
of the object. In other words, its just a nicely formatted human readable string,
there's no expectation that this is a valid Python expression. 

2. repr(object) function. This is called on your class when an object 
of its type is passed to the repr function. Now, according to the Python
documentation, this function should try to return a Python expression 
that could be used to recreate the object with the same value.
Now, that may not always be possible with complex objects, 
in which case, you can just return a useful description. 
This function is often used for debugging purposes, so it's important that 
it contain useful data. If your class overrides repr, but not str, then 
repr will also be used to generate the human readable string. 

3. format(object, format_spec) function, which takes a format spec as 
an argument, and as you might have guessed, this function will be called 
when the object is converted using the strings format function with a 
formatting specification. The format spec will contain the description 
of the desired formatting options, and it's up to your class to implement 
the string formatting logic. Now, in reality, most classes never actually 
do that, they simply delegate to the built-in string format function. 

4. The last function isn't really a string function, it handles the converting 
of an object into a bytes object. When there's some scenarios where you was to pass 
data as a set of bytes, and using this function you can do that.
It's called when the bytes conversion function is invoked on the object.
 